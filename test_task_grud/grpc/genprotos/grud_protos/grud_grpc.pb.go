// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc/raw_protos/grud_protos/grud.proto

package grud_protos

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrudServiceClient is the client API for GrudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrudServiceClient interface {
	GetOneGrpc(ctx context.Context, in *IDParam, opts ...grpc.CallOption) (*GrudParams, error)
	GetAllGrpc(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GrudResponse, error)
	UpdateGrpc(ctx context.Context, in *GrudParams, opts ...grpc.CallOption) (*BooleanResponse, error)
	DeleteGrpc(ctx context.Context, in *IDParam, opts ...grpc.CallOption) (*BooleanResponse, error)
}

type grudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrudServiceClient(cc grpc.ClientConnInterface) GrudServiceClient {
	return &grudServiceClient{cc}
}

func (c *grudServiceClient) GetOneGrpc(ctx context.Context, in *IDParam, opts ...grpc.CallOption) (*GrudParams, error) {
	out := new(GrudParams)
	err := c.cc.Invoke(ctx, "/grud_protos.GrudService/GetOneGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grudServiceClient) GetAllGrpc(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GrudResponse, error) {
	out := new(GrudResponse)
	err := c.cc.Invoke(ctx, "/grud_protos.GrudService/GetAllGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grudServiceClient) UpdateGrpc(ctx context.Context, in *GrudParams, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/grud_protos.GrudService/UpdateGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grudServiceClient) DeleteGrpc(ctx context.Context, in *IDParam, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/grud_protos.GrudService/DeleteGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrudServiceServer is the server API for GrudService service.
// All implementations should embed UnimplementedGrudServiceServer
// for forward compatibility
type GrudServiceServer interface {
	GetOneGrpc(context.Context, *IDParam) (*GrudParams, error)
	GetAllGrpc(context.Context, *empty.Empty) (*GrudResponse, error)
	UpdateGrpc(context.Context, *GrudParams) (*BooleanResponse, error)
	DeleteGrpc(context.Context, *IDParam) (*BooleanResponse, error)
}

// UnimplementedGrudServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGrudServiceServer struct {
}

func (UnimplementedGrudServiceServer) GetOneGrpc(context.Context, *IDParam) (*GrudParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneGrpc not implemented")
}
func (UnimplementedGrudServiceServer) GetAllGrpc(context.Context, *empty.Empty) (*GrudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGrpc not implemented")
}
func (UnimplementedGrudServiceServer) UpdateGrpc(context.Context, *GrudParams) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGrpc not implemented")
}
func (UnimplementedGrudServiceServer) DeleteGrpc(context.Context, *IDParam) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrpc not implemented")
}

// UnsafeGrudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrudServiceServer will
// result in compilation errors.
type UnsafeGrudServiceServer interface {
	mustEmbedUnimplementedGrudServiceServer()
}

func RegisterGrudServiceServer(s grpc.ServiceRegistrar, srv GrudServiceServer) {
	s.RegisterService(&GrudService_ServiceDesc, srv)
}

func _GrudService_GetOneGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrudServiceServer).GetOneGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grud_protos.GrudService/GetOneGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrudServiceServer).GetOneGrpc(ctx, req.(*IDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrudService_GetAllGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrudServiceServer).GetAllGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grud_protos.GrudService/GetAllGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrudServiceServer).GetAllGrpc(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrudService_UpdateGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrudParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrudServiceServer).UpdateGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grud_protos.GrudService/UpdateGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrudServiceServer).UpdateGrpc(ctx, req.(*GrudParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrudService_DeleteGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrudServiceServer).DeleteGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grud_protos.GrudService/DeleteGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrudServiceServer).DeleteGrpc(ctx, req.(*IDParam))
	}
	return interceptor(ctx, in, info, handler)
}

// GrudService_ServiceDesc is the grpc.ServiceDesc for GrudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grud_protos.GrudService",
	HandlerType: (*GrudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneGrpc",
			Handler:    _GrudService_GetOneGrpc_Handler,
		},
		{
			MethodName: "GetAllGrpc",
			Handler:    _GrudService_GetAllGrpc_Handler,
		},
		{
			MethodName: "UpdateGrpc",
			Handler:    _GrudService_UpdateGrpc_Handler,
		},
		{
			MethodName: "DeleteGrpc",
			Handler:    _GrudService_DeleteGrpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/raw_protos/grud_protos/grud.proto",
}
